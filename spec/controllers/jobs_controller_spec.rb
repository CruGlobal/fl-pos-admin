require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe JobsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Job. As you add validations to Job, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      shop_id: 1,
      start_date: Date.today.last_week(:thursday),
      end_date: Date.today.last_week(:thursday) + 4.days
    }
  }

  let(:invalid_attributes) {
    {
      shop_id: 1,
      start_date: Date.today.last_week(:thursday),
      end_date: Date.today.last_week(:thursday) + 4.days
    }
  }

  before do
    # log in user
    session[:id_token] = "fake"

    allow_any_instance_of(JobsController).to receive(:get_event_options).and_return([])
    LightspeedStubHelpers.stub_lightspeed_account_request
  end

  describe "GET /index" do
    it "renders a successful response" do
      Job.create! valid_attributes
      get :index
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get :new
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      job = Job.create! valid_attributes
      get :edit, params: {id: job.to_param}
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    before do
      allow_any_instance_of(LightspeedApiHelper).to receive(:find_shop).and_return(double("shop", id: 1, Contact: {firstName: "John", lastName: "Doe"}))
    end

    context "with valid parameters" do
      it "creates a new Job" do
        expect {
          post :create, params: {job: valid_attributes}
        }.to change(Job, :count).by(2)
      end

      it "redirects to the created job" do
        post :create, params: {job: valid_attributes}
        expect(response).to redirect_to(jobs_url)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          shop_id: 4,
          start_date: Date.today.next_week(:thursday),
          end_date: Date.today.next_week(:thursday) + 4.days
        }
      }

      it "updates the requested job" do
        job = Job.create! valid_attributes
        patch :update, params: {id: job.id, job: new_attributes}
        job.reload
        expect(job.shop_id).to eq(4)
      end

      it "redirects to the job" do
        job = Job.create! valid_attributes
        patch :update, params: {id: job.id, job: new_attributes}
        job.reload
        expect(response).to redirect_to(jobs_url)
      end
    end
  end
end
